// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecipeBox.Models;

namespace RecipeBox.Migrations
{
  [DbContext(typeof(RecipeBoxContext))]
  [Migration("20210602173217_Initial")]
  partial class Initial
  {
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
      modelBuilder
          .HasAnnotation("Relational:MaxIdentifierLength", 64)
          .HasAnnotation("ProductVersion", "5.0.0");

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
          {
            b.Property<string>("Id")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.Property<string>("ConcurrencyStamp")
                      .IsConcurrencyToken()
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("Name")
                      .HasMaxLength(256)
                      .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

            b.Property<string>("NormalizedName")
                      .HasMaxLength(256)
                      .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

            b.HasKey("Id");

            b.HasIndex("NormalizedName")
                      .IsUnique()
                      .HasDatabaseName("RoleNameIndex");

            b.ToTable("AspNetRoles");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int");

            b.Property<string>("ClaimType")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("ClaimValue")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("RoleId")
                      .IsRequired()
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.HasKey("Id");

            b.HasIndex("RoleId");

            b.ToTable("AspNetRoleClaims");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int");

            b.Property<string>("ClaimType")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("ClaimValue")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("UserId")
                      .IsRequired()
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.HasKey("Id");

            b.HasIndex("UserId");

            b.ToTable("AspNetUserClaims");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
          {
            b.Property<string>("LoginProvider")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.Property<string>("ProviderKey")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.Property<string>("ProviderDisplayName")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("UserId")
                      .IsRequired()
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.HasKey("LoginProvider", "ProviderKey");

            b.HasIndex("UserId");

            b.ToTable("AspNetUserLogins");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
          {
            b.Property<string>("UserId")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.Property<string>("RoleId")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.HasKey("UserId", "RoleId");

            b.HasIndex("RoleId");

            b.ToTable("AspNetUserRoles");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
          {
            b.Property<string>("UserId")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.Property<string>("LoginProvider")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.Property<string>("Name")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.Property<string>("Value")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.HasKey("UserId", "LoginProvider", "Name");

            b.ToTable("AspNetUserTokens");
          });

      modelBuilder.Entity("RecipeBox.Models.ApplicationUser", b =>
          {
            b.Property<string>("Id")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.Property<int>("AccessFailedCount")
                      .HasColumnType("int");

            b.Property<string>("ConcurrencyStamp")
                      .IsConcurrencyToken()
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("Email")
                      .HasMaxLength(256)
                      .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

            b.Property<bool>("EmailConfirmed")
                      .HasColumnType("tinyint(1)");

            b.Property<bool>("LockoutEnabled")
                      .HasColumnType("tinyint(1)");

            b.Property<DateTimeOffset?>("LockoutEnd")
                      .HasColumnType("datetime(6)");

            b.Property<string>("NormalizedEmail")
                      .HasMaxLength(256)
                      .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

            b.Property<string>("NormalizedUserName")
                      .HasMaxLength(256)
                      .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

            b.Property<string>("PasswordHash")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("PhoneNumber")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<bool>("PhoneNumberConfirmed")
                      .HasColumnType("tinyint(1)");

            b.Property<string>("SecurityStamp")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<bool>("TwoFactorEnabled")
                      .HasColumnType("tinyint(1)");

            b.Property<string>("UserName")
                      .HasMaxLength(256)
                      .HasColumnType("varchar(256) CHARACTER SET utf8mb4");

            b.HasKey("Id");

            b.HasIndex("NormalizedEmail")
                      .HasDatabaseName("EmailIndex");

            b.HasIndex("NormalizedUserName")
                      .IsUnique()
                      .HasDatabaseName("UserNameIndex");

            b.ToTable("AspNetUsers");
          });

      modelBuilder.Entity("RecipeBox.Models.Ingredient", b =>
          {
            b.Property<int>("IngredientId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int");

            b.Property<string>("Name")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("UserId")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.HasKey("IngredientId");

            b.HasIndex("UserId");

            b.ToTable("Ingredients");
          });

      modelBuilder.Entity("RecipeBox.Models.IngredientRecipe", b =>
          {
            b.Property<int>("IngredientRecipeId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int");

            b.Property<int>("IngredientId")
                      .HasColumnType("int");

            b.Property<int>("RecipeId")
                      .HasColumnType("int");

            b.HasKey("IngredientRecipeId");

            b.HasIndex("IngredientId");

            b.HasIndex("RecipeId");

            b.ToTable("IngredientRecipes");
          });

      modelBuilder.Entity("RecipeBox.Models.Rating", b =>
          {
            b.Property<int>("RatingId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int");

            b.Property<int>("LucyStar")
                      .HasColumnType("int");

            b.Property<string>("UserId")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.HasKey("RatingId");

            b.HasIndex("UserId");

            b.ToTable("Ratings");
          });

      modelBuilder.Entity("RecipeBox.Models.RatingRecipe", b =>
          {
            b.Property<int>("RatingRecipeId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int");

            b.Property<int>("RatingId")
                      .HasColumnType("int");

            b.Property<int>("RecipeId")
                      .HasColumnType("int");

            b.HasKey("RatingRecipeId");

            b.HasIndex("RatingId");

            b.HasIndex("RecipeId");

            b.ToTable("RatingRecipes");
          });

      modelBuilder.Entity("RecipeBox.Models.Recipe", b =>
          {
            b.Property<int>("RecipeId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int");

            b.Property<string>("Course")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<DateTime>("PrepDate")
                      .HasColumnType("datetime(6)");

            b.Property<int>("PrepTime")
                      .HasColumnType("int");

            b.Property<string>("Style")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("Title")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("UserId")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.HasKey("RecipeId");

            b.HasIndex("UserId");

            b.ToTable("Recipes");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
          {
            b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                      .WithMany()
                      .HasForeignKey("RoleId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
          {
            b.HasOne("RecipeBox.Models.ApplicationUser", null)
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
          {
            b.HasOne("RecipeBox.Models.ApplicationUser", null)
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
          {
            b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                      .WithMany()
                      .HasForeignKey("RoleId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.HasOne("RecipeBox.Models.ApplicationUser", null)
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
          {
            b.HasOne("RecipeBox.Models.ApplicationUser", null)
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("RecipeBox.Models.Ingredient", b =>
          {
            b.HasOne("RecipeBox.Models.ApplicationUser", "User")
                      .WithMany()
                      .HasForeignKey("UserId");

            b.Navigation("User");
          });

      modelBuilder.Entity("RecipeBox.Models.IngredientRecipe", b =>
          {
            b.HasOne("RecipeBox.Models.Ingredient", "Ingredient")
                      .WithMany("JoinIR")
                      .HasForeignKey("IngredientId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.HasOne("RecipeBox.Models.Recipe", "Recipe")
                      .WithMany("JoinIR")
                      .HasForeignKey("RecipeId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.Navigation("Ingredient");

            b.Navigation("Recipe");
          });

      modelBuilder.Entity("RecipeBox.Models.Rating", b =>
          {
            b.HasOne("RecipeBox.Models.ApplicationUser", "User")
                      .WithMany()
                      .HasForeignKey("UserId");

            b.Navigation("User");
          });

      modelBuilder.Entity("RecipeBox.Models.RatingRecipe", b =>
          {
            b.HasOne("RecipeBox.Models.Rating", "Rating")
                      .WithMany("JoinRR")
                      .HasForeignKey("RatingId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.HasOne("RecipeBox.Models.Recipe", "Recipe")
                      .WithMany("JoinRR")
                      .HasForeignKey("RecipeId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.Navigation("Rating");

            b.Navigation("Recipe");
          });

      modelBuilder.Entity("RecipeBox.Models.Recipe", b =>
          {
            b.HasOne("RecipeBox.Models.ApplicationUser", "User")
                      .WithMany()
                      .HasForeignKey("UserId");

            b.Navigation("User");
          });

      modelBuilder.Entity("RecipeBox.Models.Ingredient", b =>
          {
            b.Navigation("JoinIR");
          });

      modelBuilder.Entity("RecipeBox.Models.Rating", b =>
          {
            b.Navigation("JoinRR");
          });

      modelBuilder.Entity("RecipeBox.Models.Recipe", b =>
          {
            b.Navigation("JoinIR");

            b.Navigation("JoinRR");
          });
#pragma warning restore 612, 618
    }
  }
}
